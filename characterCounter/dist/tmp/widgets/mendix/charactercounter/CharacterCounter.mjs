import { useState, useRef, useEffect, createElement } from 'react';

function CharacterCounter({ content, characterLimit = 0 }) {
    const [currentInput, setCurrentInput] = useState("");
    const myContainerRef = useRef(null);
    const onInputChange = (e) => {
        if (e) {
            setCurrentInput(e.target.value);
        }
    };
    useEffect(() => {
        let eventListner;
        if (myContainerRef.current) {
            const inputElements = myContainerRef.current.querySelectorAll("input");
            if (inputElements.length) {
                eventListner = inputElements[0];
                eventListner.addEventListener("input", onInputChange);
            }
        }
        return () => {
            eventListner.removeEventListener("input", onInputChange);
        };
    }, [myContainerRef]);
    /*return (
        <div className="character_counter">
            <div ref={myContainerRef}>{content}</div>
            <span>
                {currentInput.length} / {characterLimit}
            </span>
        </div>
    );*/
    const charLimitStyles = () => {
        const charLength = currentInput.length;
        const charLimit = characterLimit ? characterLimit : 0;
        if (charLength > charLimit * 0.8) {
            return "character_counter_80_percent";
        }
        else if (charLength > charLimit * 0.6) {
            return "character_counter_60_percent";
        }
        return "";
    };
    return (createElement("div", { className: `${charLimitStyles()} character_counter` },
        createElement("div", { ref: myContainerRef }, content),
        createElement("span", null,
            currentInput.length,
            " / ",
            characterLimit)));
}

export { CharacterCounter };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2hhcmFjdGVyQ291bnRlci5tanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9DaGFyYWN0ZXJDb3VudGVyLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZWFjdEVsZW1lbnQsIFJlYWN0Tm9kZSwgY3JlYXRlRWxlbWVudCwgdXNlUmVmLCB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG4vKmltcG9ydCB7IENoYXJhY3RlckNvdW50ZXJQcmV2aWV3UHJvcHMgfSBmcm9tIFwiLi4vdHlwaW5ncy9DaGFyYWN0ZXJDb3VudGVyUHJvcHNcIjsqL1xuaW1wb3J0IFwiLi91aS9DaGFyYWN0ZXJDb3VudGVyLmNzc1wiO1xuXG5pbnRlcmZhY2UgQ2hhcmFjdGVyQ291bnRlclByb3BzIHtcbiAgICBjb250ZW50PzogUmVhY3ROb2RlO1xuICAgIGNoYXJhY3RlckxpbWl0PzogbnVtYmVyOyAvLyBDaGFuZ2VkIFJlYWN0Tm9kZSB0byBudW1iZXIgZm9yIGNoYXJhY3RlckxpbWl0XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBDaGFyYWN0ZXJDb3VudGVyKHsgY29udGVudCwgY2hhcmFjdGVyTGltaXQgPSAwIH06IENoYXJhY3RlckNvdW50ZXJQcm9wcyk6IFJlYWN0RWxlbWVudCB7XG4gICAgY29uc3QgW2N1cnJlbnRJbnB1dCwgc2V0Q3VycmVudElucHV0XSA9IHVzZVN0YXRlPHN0cmluZz4oXCJcIik7XG4gICAgY29uc3QgbXlDb250YWluZXJSZWYgPSB1c2VSZWY8SFRNTERpdkVsZW1lbnQ+KG51bGwpO1xuICAgIGNvbnN0IG9uSW5wdXRDaGFuZ2UgPSAoZTogRXZlbnQpOiB2b2lkID0+IHtcbiAgICAgICAgaWYgKGUpIHtcbiAgICAgICAgICAgIHNldEN1cnJlbnRJbnB1dCgoZS50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudCkudmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGxldCBldmVudExpc3RuZXI6IEVsZW1lbnQ7XG4gICAgICAgIGlmIChteUNvbnRhaW5lclJlZi5jdXJyZW50KSB7XG4gICAgICAgICAgICBjb25zdCBpbnB1dEVsZW1lbnRzID0gbXlDb250YWluZXJSZWYuY3VycmVudC5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRcIik7XG4gICAgICAgICAgICBpZiAoaW5wdXRFbGVtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBldmVudExpc3RuZXIgPSBpbnB1dEVsZW1lbnRzWzBdO1xuICAgICAgICAgICAgICAgIGV2ZW50TGlzdG5lci5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgb25JbnB1dENoYW5nZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIGV2ZW50TGlzdG5lci5yZW1vdmVFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgb25JbnB1dENoYW5nZSk7XG4gICAgICAgIH07XG4gICAgfSwgW215Q29udGFpbmVyUmVmXSk7XG5cbiAgICAvKnJldHVybiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2hhcmFjdGVyX2NvdW50ZXJcIj5cbiAgICAgICAgICAgIDxkaXYgcmVmPXtteUNvbnRhaW5lclJlZn0+e2NvbnRlbnR9PC9kaXY+XG4gICAgICAgICAgICA8c3Bhbj5cbiAgICAgICAgICAgICAgICB7Y3VycmVudElucHV0Lmxlbmd0aH0gLyB7Y2hhcmFjdGVyTGltaXR9XG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgIDwvZGl2PlxuICAgICk7Ki9cblxuICAgIGNvbnN0IGNoYXJMaW1pdFN0eWxlcyA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgY2hhckxlbmd0aCA9IGN1cnJlbnRJbnB1dC5sZW5ndGg7XG4gICAgICAgIGNvbnN0IGNoYXJMaW1pdCA9IGNoYXJhY3RlckxpbWl0ID8gY2hhcmFjdGVyTGltaXQgOiAwO1xuICAgICAgICBpZiAoY2hhckxlbmd0aCA+IGNoYXJMaW1pdCAqIDAuOCkge1xuICAgICAgICAgICAgcmV0dXJuIFwiY2hhcmFjdGVyX2NvdW50ZXJfODBfcGVyY2VudFwiO1xuICAgICAgICB9IGVsc2UgaWYgKGNoYXJMZW5ndGggPiBjaGFyTGltaXQgKiAwLjYpIHtcbiAgICAgICAgICAgIHJldHVybiBcImNoYXJhY3Rlcl9jb3VudGVyXzYwX3BlcmNlbnRcIjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gXCJcIjtcbiAgICB9O1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e2Ake2NoYXJMaW1pdFN0eWxlcygpfSBjaGFyYWN0ZXJfY291bnRlcmB9PlxuICAgICAgICAgICAgPGRpdiByZWY9e215Q29udGFpbmVyUmVmfT57Y29udGVudH08L2Rpdj5cbiAgICAgICAgICAgIDxzcGFuPlxuICAgICAgICAgICAgICAgIHtjdXJyZW50SW5wdXQubGVuZ3RofSAvIHtjaGFyYWN0ZXJMaW1pdH1cbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgPC9kaXY+XG4gICAgKTtcbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQVNNLFNBQVUsZ0JBQWdCLENBQUMsRUFBRSxPQUFPLEVBQUUsY0FBYyxHQUFHLENBQUMsRUFBeUIsRUFBQTtJQUNuRixNQUFNLENBQUMsWUFBWSxFQUFFLGVBQWUsQ0FBQyxHQUFHLFFBQVEsQ0FBUyxFQUFFLENBQUMsQ0FBQztBQUM3RCxJQUFBLE1BQU0sY0FBYyxHQUFHLE1BQU0sQ0FBaUIsSUFBSSxDQUFDLENBQUM7QUFDcEQsSUFBQSxNQUFNLGFBQWEsR0FBRyxDQUFDLENBQVEsS0FBVTtBQUNyQyxRQUFBLElBQUksQ0FBQyxFQUFFO0FBQ0gsWUFBQSxlQUFlLENBQUUsQ0FBQyxDQUFDLE1BQTJCLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDekQsU0FBQTtBQUNMLEtBQUMsQ0FBQztJQUVGLFNBQVMsQ0FBQyxNQUFLO0FBQ1gsUUFBQSxJQUFJLFlBQXFCLENBQUM7UUFDMUIsSUFBSSxjQUFjLENBQUMsT0FBTyxFQUFFO1lBQ3hCLE1BQU0sYUFBYSxHQUFHLGNBQWMsQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDdkUsSUFBSSxhQUFhLENBQUMsTUFBTSxFQUFFO0FBQ3RCLGdCQUFBLFlBQVksR0FBRyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDaEMsZ0JBQUEsWUFBWSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxhQUFhLENBQUMsQ0FBQztBQUN6RCxhQUFBO0FBQ0osU0FBQTtBQUNELFFBQUEsT0FBTyxNQUFLO0FBQ1IsWUFBQSxZQUFZLENBQUMsbUJBQW1CLENBQUMsT0FBTyxFQUFFLGFBQWEsQ0FBQyxDQUFDO0FBQzdELFNBQUMsQ0FBQztBQUNOLEtBQUMsRUFBRSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7QUFFckI7Ozs7Ozs7QUFPSTtJQUVKLE1BQU0sZUFBZSxHQUFHLE1BQUs7QUFDekIsUUFBQSxNQUFNLFVBQVUsR0FBRyxZQUFZLENBQUMsTUFBTSxDQUFDO1FBQ3ZDLE1BQU0sU0FBUyxHQUFHLGNBQWMsR0FBRyxjQUFjLEdBQUcsQ0FBQyxDQUFDO0FBQ3RELFFBQUEsSUFBSSxVQUFVLEdBQUcsU0FBUyxHQUFHLEdBQUcsRUFBRTtBQUM5QixZQUFBLE9BQU8sOEJBQThCLENBQUM7QUFDekMsU0FBQTtBQUFNLGFBQUEsSUFBSSxVQUFVLEdBQUcsU0FBUyxHQUFHLEdBQUcsRUFBRTtBQUNyQyxZQUFBLE9BQU8sOEJBQThCLENBQUM7QUFDekMsU0FBQTtBQUNELFFBQUEsT0FBTyxFQUFFLENBQUM7QUFDZCxLQUFDLENBQUM7QUFFRixJQUFBLFFBQ0ksYUFBSyxDQUFBLEtBQUEsRUFBQSxFQUFBLFNBQVMsRUFBRSxDQUFHLEVBQUEsZUFBZSxFQUFFLENBQW9CLGtCQUFBLENBQUEsRUFBQTtBQUNwRCxRQUFBLGFBQUEsQ0FBQSxLQUFBLEVBQUEsRUFBSyxHQUFHLEVBQUUsY0FBYyxFQUFBLEVBQUcsT0FBTyxDQUFPO0FBQ3pDLFFBQUEsYUFBQSxDQUFBLE1BQUEsRUFBQSxJQUFBO0FBQ0ssWUFBQSxZQUFZLENBQUMsTUFBTTs7WUFBSyxjQUFjLENBQ3BDLENBQ0wsRUFDUjtBQUNOOzs7OyJ9
